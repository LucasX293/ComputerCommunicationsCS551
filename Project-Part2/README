#============================================================================================
#	Student Names: 	Aniket Zamwar & Abhishek Prabhudesai
#	USC ID: 	Aniket   - 1488-5616-98
			Abhishek - 4722-5949-88
#	Nunki ID:	zamwar 
#	Nunki ID:	prabhude
#	Email: 		zamwar@usc.edu	
#	       		prabhude@usc.edu
#	Submitted:	20th April, 2012
#	Project:  	WarmUp Project #3 PART#2 Final - CSCI 551 Spring 2012
#	Instructor: 	Bill Cheng
#============================================================================================

+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+
PLEASE NOTE VERY IMPORTANT Information below for grading:
+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+

PLEASE NOTE Following Points while checking the test cases:
+1> reset mode: When executed with reset flag all the files are 'removed' and "recreated" when the program starts, so you might find the node files in directory after running the executable with -reset flag.
    + Files Recreated are as under:
      	    - LRUListFile
	    - kwrd_indx
	    - lastFileIndexFile
	    - name_indx
 	    - permFileListFile
	    - servant.log        
	    - sha1_indx

+2> When terminal is not displayed on screen, please press "Ctrl-C"; it will get back the prompt.

+3> No logging in single node test cases, as no messages flow over the network. (It was confirmed with professor that there is no need of log when single node test case is tested).

+3> sha1_index File written to disk is not readable, as string object which we are using as a key in STL MAP is used to write to file. We confirmed with professor that it is not a problem; if we provide you with the information/way to read and undertand the file.
So, to read sha1_index file and understand its contents; please run the following command to get hex output of the file contents.
    example:
    > od -x ~/tmp/final2/n00/sha1_indx 
	0000000 8ae0 0558 5be9 c44e f191 0d25 dd6f 8da5
	0000020 8c43 2ab5 3d31 2c32 0a00
	0000031
	<Explanation>
	As the index file is in ini format, the above output will also contain the HEX equivalent of "=" and the file numbers.
	The first 20 bytes of this output represent the sha1 value.
	
	One more way of getting the sha1 value is using the -N 20 with od. For eg: od -x -N 20 ~/tmp/final2/n00/sha1_indx.
	This will show only the first 20 bytes in the index file which is the sha1 value.

+4> Index Files: <FORMAT> Format used for the follwoing index files in the project is the 'ini' file format i.e key value pair.
    Key: Filename/keword/SHA1
    Value: comma separated list of File Numbers used

	    - LRUListFile
	    - kwrd_indx
	    - lastFileIndexFile
	    - name_indx
 	    - permFileListFile        
	    - sha1_indx

+5> Generation of Random Password when 'delete file' command is issued on the prompt.
    Case 1: If the node is not the owner of the file and it issues the delete request, it asks for random password generation.
    Case 2: If the node is OWNER of the file and it issues delete request with incorrect nonce, it asks for random password generation.

+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+
+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+_+

#==============================================
#	How To Compile & Source Files
#==============================================
-----------------------------------------------------------
- Compile - Create executable named 'sv_node'
-----------------------------------------------------------
> make

-----------------------------------------------------------
- Project Files -
-----------------------------------------------------------
    
1.  headers.h                 	- Consits of all HEADER Includes needed in the project.
2.  systemDataStructures.h	- The Data Structures likes Connection Details with each Nodes, Message Cache, function declaration for the same, Locks, CVs and 					  Variables needed at each node.

3.  ntwknode.h       		- Consists of structures needed to store node Info like: <structure to store all INI information>.
4.  iniparser.h               	- Function Declarations to parse INI.
4.  iniparser.cpp             	- Parses the INI File and stores all the information in a structure.
5.  ntwknode.cpp              	- Using ntwknode.h structures, parses INI File and stores all the information needed.
6.  uoid.cpp			- Creates uniqie uoid for parameters passed to it, using SHA.

8.  commonFunctions.cpp       	- Functions used all accross the project are defined here - logging, clearing, MAP Traversals.
9.  checkThread.cpp           	- Thread Function is defined in this file to send CHECK Messages at BEACON NODES.
10. commonParsers.cpp		- Functions to read/write indexes to file and from file.

11. reader.cpp			- Reader Thread to read and parse incoming character Stream data for each node.
12. writer.cpp			- Reader Thread to convert structured data to character stream and send to other connected nodes.

13. keyboardThread.h          	- declarations needed in the keyboard thread neeeded in the project.
14. keyboardThread.cpp       	- keyboard thread functionality has been implemented in this file.

15. nonBeaconNode.h           	- declarations of functions and structures needed at Non Beacon Node.
16. nonBeaconDispatcher.cpp   	- Dispatcher at Non Beacon to process incoming messages and handle requests, forward it on proper routes or use the message if it 						is a response.
17. nonBeaconTimerThread.cpp  	- Timer thread to handle the inactivity of connections in nonbeacon, message cache time outs and clean up handled in it.

18. message.h                 	- all types of messages used in the project are #defined here
19. messageStructures.h       	- THE structure for Header Message and structures for all types of message body are declared here in this file.
20. messageHandlers.cpp       	- Functions: Creation of Message, Convertion to Character Stream to send to other nodes, Character Stream to Structure for incoming messages.

21. nonBeaconNode.cpp         	- Non Beacon Node startup Implementation of Join/use of Init to connect to beacon/ checking Min Neighbors.

22. beaconNode.h              	- Beacon Node Information and functions for startup implementeation declared here.
23. beaconNode.cpp            	- Forming Mesh and holding the mesh have been implemented here.
24. dispatcher.cpp            	- Dispatcher @ BEACON to process incoming and ougoing messages/forward/responses.
25. beaconTimerThread.cpp     	- Timer node @ BEACON to handle cache, message timeouts and connections activity.

26. Makefile			- Source Code Compilation rules for all header and source Files, Compiles the executable named 'sv_node'
27. README			- Project Description and Information

-----------------------------------------------------------
- Clean - Cleans all the .o and non-source files created (rm -f sv_node *.o *.wav *.ini *.out *.jpg *.mp3 *.gif *~)
-----------------------------------------------------------
> make clean


#==============================================#==============================================#==============================================
#	Project DESIGN
#==============================================#==============================================#==============================================

Project Design-1:
	
	
	This is how blocks have been designed at each node:
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
					       ____________________
	 				       |                  |
					       |   Message Cache  |						
					       |________| |_______| 	
		____					| |		       _____
	 >>>>>>	____|--> Reader-1 -\			| |	        /---> |_____ --->>> Writer 1
		____		    \	   _____________| |_________   /          _____
	 >>>>>>	____|--> Reader-2 ------>>>________ Dispatcher_______ -->>-----> |_____ --->>> Writer 2
		____  		    /    			       \       _____
	 >>>>>>	____|--> Reader-3 -/ 				        \---> |_____ --->>> Writer 3
									


         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

+ Project has been designed in c as well as c++ programming constructs.
+ mutex and condition varialbe have been used to provide exclusive access of the queue to server and customers.
+ POSIX Threads have been used to implement multi-threading.
+ All test cases have been verified and checked before submission and were executed successfully without any known issues.
+ Nounexpected long blocking of the program or race conditions have been experienced in the project implementation.
+ read and write of data at beacons and non-beacons have been implemented byte-by-byte, i.e. only one byte is sent and one byte is received.
Character Stream implementation has been done.
      
Other Key Points:
- All the Design Specifications given in the Project Spec have been followed in the implementation.
- pthreads are used in server module to handle the requests from multiple servers.
- To avoid race conditions, pthread mutex and signals are used on large scale in the project implementation to share variables between threads at a node.
- Signal handling has been done for SIGINT, SIGUSR1 and SIGPIPE to handle signals in the program execution.
- If entry is not found in the INI file, then the program uses the default values.
- malloc is used to allocate dynamic memory.
- C++ STL libraries MAP, QUEUE have been used on large scale for all the implementation of queues to store, receive and send data accross the network
formed between the nodes.
- STL MAP is used to maintain a MESSAGE CACHE in the program implementation using UOID as a key.


#==============================================#==============================================#==============================================
#	KNOWN BUGS
#==============================================#==============================================#==============================================

- There are no known bugs in the implementation of the project, all the logic has been tested for all possible cases mentioned on grading guidelines.

- All the provided grading guidelines were tested with the execution of the project and the output received was successfully compared with the expected output
provided in the guidelines.

- There are no segmentation faults/memory corruption issues in the project implementation; after 10-12 cycles of testing the test cases none of these were experienced and everything worked with expected OUTPUT.

#==============================================#==============================================#==============================================
#	DEVIATION FROM Spec
#==============================================#==============================================#==============================================
Specs mentioned in the Project WebPage and comments provided by professor during class and via mail as well as information mentioned in presentation have been followed for project's implementation. There is no deviation from the logical requirement of the system in the specs.

#==============================================#==============================================#==============================================
#	<RESPONSIBILITIES OF MEMBERS>
#==============================================#==============================================#==============================================
The project was first designed by both the team members and after finalizing the design, code was developed in parts and tested progrssively.

Design of the project was done before starting coding, so that both the members are on the same road.
(+) Aniket: Designed + Coded Message Handling Section to be sent and received(structure to character stream conversion, character stream to structure conversion), Queuing of Messages for Beacons, Beacon Timer, Message Caching at Beacon, Keyword Search, Bit Vector Generation, SHA Search, File name Search, Reader/Writer modifications.

(+) Abhishek: Designed and implemented INI Parsing program, Non Beacon Timer, Non Beacon Startup + code for initial participation into network(Join and hello), 
Beacon Starup Code, Join, STORE, GET, DELETE message handling in dispatcher of beacon and non beacon(Beacon Dispatcher Part 2 modifications), Store probability handling, File Indexing, Keyboard thread. Implementation of GET message generation for commands from keyboard on the basis of status response.

#==============================================#==============================================#==============================================
#	References And Credits
#==============================================#==============================================#==============================================
	#-CREDITS-#
	+ Code for Functions InitRandom and GetInterval were used as it is without any changes to them as provided on the Project Spec Website.
		http://merlot.usc.edu/cs551-s12/projects/warmup2.html#code 

	#-REFERENCES-#
	1. C/Ansi C - http://www.java2s.com/Code/C/CatalogC.htm
	2. POSIX Threads: http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html
			  https://computing.llnl.gov/tutorials/pthreads/
	3. http://www.cplusplus.com/reference/stl/
	
	None of the source code was directly copied from anywhere, it was used for understanding and the code designed and was coded by self.
	UOID Creation Function was used as provided by professor on the Course Website with minute modification as required.

#========================================================================END========================================================================#
